// Code generated by protoc-gen-go. DO NOT EDIT.
// source: face.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ComparisonRequest struct {
	// Types that are valid to be assigned to ComparisonData:
	//	*ComparisonRequest_OriginalMetadata
	//	*ComparisonRequest_OriginalImage
	//	*ComparisonRequest_ForCheck
	//	*ComparisonRequest_ForCheckImage
	ComparisonData       isComparisonRequest_ComparisonData `protobuf_oneof:"ComparisonData"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *ComparisonRequest) Reset()         { *m = ComparisonRequest{} }
func (m *ComparisonRequest) String() string { return proto.CompactTextString(m) }
func (*ComparisonRequest) ProtoMessage()    {}
func (*ComparisonRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{0}
}

func (m *ComparisonRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComparisonRequest.Unmarshal(m, b)
}
func (m *ComparisonRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComparisonRequest.Marshal(b, m, deterministic)
}
func (m *ComparisonRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComparisonRequest.Merge(m, src)
}
func (m *ComparisonRequest) XXX_Size() int {
	return xxx_messageInfo_ComparisonRequest.Size(m)
}
func (m *ComparisonRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ComparisonRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ComparisonRequest proto.InternalMessageInfo

type isComparisonRequest_ComparisonData interface {
	isComparisonRequest_ComparisonData()
}

type ComparisonRequest_OriginalMetadata struct {
	OriginalMetadata *Metadata `protobuf:"bytes,1,opt,name=originalMetadata,proto3,oneof"`
}

type ComparisonRequest_OriginalImage struct {
	OriginalImage []byte `protobuf:"bytes,2,opt,name=originalImage,proto3,oneof"`
}

type ComparisonRequest_ForCheck struct {
	ForCheck *Metadata `protobuf:"bytes,3,opt,name=forCheck,proto3,oneof"`
}

type ComparisonRequest_ForCheckImage struct {
	ForCheckImage []byte `protobuf:"bytes,4,opt,name=forCheckImage,proto3,oneof"`
}

func (*ComparisonRequest_OriginalMetadata) isComparisonRequest_ComparisonData() {}

func (*ComparisonRequest_OriginalImage) isComparisonRequest_ComparisonData() {}

func (*ComparisonRequest_ForCheck) isComparisonRequest_ComparisonData() {}

func (*ComparisonRequest_ForCheckImage) isComparisonRequest_ComparisonData() {}

func (m *ComparisonRequest) GetComparisonData() isComparisonRequest_ComparisonData {
	if m != nil {
		return m.ComparisonData
	}
	return nil
}

func (m *ComparisonRequest) GetOriginalMetadata() *Metadata {
	if x, ok := m.GetComparisonData().(*ComparisonRequest_OriginalMetadata); ok {
		return x.OriginalMetadata
	}
	return nil
}

func (m *ComparisonRequest) GetOriginalImage() []byte {
	if x, ok := m.GetComparisonData().(*ComparisonRequest_OriginalImage); ok {
		return x.OriginalImage
	}
	return nil
}

func (m *ComparisonRequest) GetForCheck() *Metadata {
	if x, ok := m.GetComparisonData().(*ComparisonRequest_ForCheck); ok {
		return x.ForCheck
	}
	return nil
}

func (m *ComparisonRequest) GetForCheckImage() []byte {
	if x, ok := m.GetComparisonData().(*ComparisonRequest_ForCheckImage); ok {
		return x.ForCheckImage
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ComparisonRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ComparisonRequest_OriginalMetadata)(nil),
		(*ComparisonRequest_OriginalImage)(nil),
		(*ComparisonRequest_ForCheck)(nil),
		(*ComparisonRequest_ForCheckImage)(nil),
	}
}

type ComparisonRespons struct {
	Coincidences         bool     `protobuf:"varint,1,opt,name=coincidences,proto3" json:"coincidences,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComparisonRespons) Reset()         { *m = ComparisonRespons{} }
func (m *ComparisonRespons) String() string { return proto.CompactTextString(m) }
func (*ComparisonRespons) ProtoMessage()    {}
func (*ComparisonRespons) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{1}
}

func (m *ComparisonRespons) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComparisonRespons.Unmarshal(m, b)
}
func (m *ComparisonRespons) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComparisonRespons.Marshal(b, m, deterministic)
}
func (m *ComparisonRespons) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComparisonRespons.Merge(m, src)
}
func (m *ComparisonRespons) XXX_Size() int {
	return xxx_messageInfo_ComparisonRespons.Size(m)
}
func (m *ComparisonRespons) XXX_DiscardUnknown() {
	xxx_messageInfo_ComparisonRespons.DiscardUnknown(m)
}

var xxx_messageInfo_ComparisonRespons proto.InternalMessageInfo

func (m *ComparisonRespons) GetCoincidences() bool {
	if m != nil {
		return m.Coincidences
	}
	return false
}

type FindRequest struct {
	// Types that are valid to be assigned to FindData:
	//	*FindRequest_Metadata
	//	*FindRequest_Image
	FindData             isFindRequest_FindData `protobuf_oneof:"FindData"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *FindRequest) Reset()         { *m = FindRequest{} }
func (m *FindRequest) String() string { return proto.CompactTextString(m) }
func (*FindRequest) ProtoMessage()    {}
func (*FindRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{2}
}

func (m *FindRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindRequest.Unmarshal(m, b)
}
func (m *FindRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindRequest.Marshal(b, m, deterministic)
}
func (m *FindRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindRequest.Merge(m, src)
}
func (m *FindRequest) XXX_Size() int {
	return xxx_messageInfo_FindRequest.Size(m)
}
func (m *FindRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindRequest proto.InternalMessageInfo

type isFindRequest_FindData interface {
	isFindRequest_FindData()
}

type FindRequest_Metadata struct {
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type FindRequest_Image struct {
	Image []byte `protobuf:"bytes,2,opt,name=image,proto3,oneof"`
}

func (*FindRequest_Metadata) isFindRequest_FindData() {}

func (*FindRequest_Image) isFindRequest_FindData() {}

func (m *FindRequest) GetFindData() isFindRequest_FindData {
	if m != nil {
		return m.FindData
	}
	return nil
}

func (m *FindRequest) GetMetadata() *Metadata {
	if x, ok := m.GetFindData().(*FindRequest_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (m *FindRequest) GetImage() []byte {
	if x, ok := m.GetFindData().(*FindRequest_Image); ok {
		return x.Image
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FindRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FindRequest_Metadata)(nil),
		(*FindRequest_Image)(nil),
	}
}

type FindRespons struct {
	Total                int32    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindRespons) Reset()         { *m = FindRespons{} }
func (m *FindRespons) String() string { return proto.CompactTextString(m) }
func (*FindRespons) ProtoMessage()    {}
func (*FindRespons) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{3}
}

func (m *FindRespons) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindRespons.Unmarshal(m, b)
}
func (m *FindRespons) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindRespons.Marshal(b, m, deterministic)
}
func (m *FindRespons) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindRespons.Merge(m, src)
}
func (m *FindRespons) XXX_Size() int {
	return xxx_messageInfo_FindRespons.Size(m)
}
func (m *FindRespons) XXX_DiscardUnknown() {
	xxx_messageInfo_FindRespons.DiscardUnknown(m)
}

var xxx_messageInfo_FindRespons proto.InternalMessageInfo

func (m *FindRespons) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type Metadata struct {
	Filename             string   `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Extension            string   `protobuf:"bytes,2,opt,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{4}
}

func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metadata.Unmarshal(m, b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return xxx_messageInfo_Metadata.Size(m)
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *Metadata) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

func init() {
	proto.RegisterType((*ComparisonRequest)(nil), "ComparisonRequest")
	proto.RegisterType((*ComparisonRespons)(nil), "ComparisonRespons")
	proto.RegisterType((*FindRequest)(nil), "FindRequest")
	proto.RegisterType((*FindRespons)(nil), "FindRespons")
	proto.RegisterType((*Metadata)(nil), "Metadata")
}

func init() {
	proto.RegisterFile("face.proto", fileDescriptor_543a5193e84d47c5)
}

var fileDescriptor_543a5193e84d47c5 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xc1, 0x6a, 0x02, 0x31,
	0x14, 0x74, 0xdb, 0x55, 0x76, 0x9f, 0xb6, 0xd8, 0x50, 0x8a, 0x48, 0x0f, 0xb2, 0x05, 0xf5, 0xb4,
	0x07, 0x7b, 0xb0, 0xd0, 0x9b, 0x8a, 0xd8, 0x43, 0x2f, 0x39, 0x7a, 0x7b, 0xae, 0x4f, 0x0d, 0x75,
	0x93, 0xed, 0x26, 0x85, 0xfe, 0x69, 0x7f, 0xa7, 0x98, 0x25, 0x6b, 0x83, 0xd0, 0x5b, 0x66, 0xde,
	0x63, 0x32, 0x33, 0x09, 0xc0, 0x0e, 0x33, 0x4a, 0x8b, 0x52, 0x19, 0x95, 0xfc, 0x04, 0x70, 0x37,
	0x57, 0x79, 0x81, 0xa5, 0xd0, 0x4a, 0x72, 0xfa, 0xfc, 0x22, 0x6d, 0xd8, 0x14, 0xba, 0xaa, 0x14,
	0x7b, 0x21, 0xf1, 0xf8, 0x4e, 0x06, 0xb7, 0x68, 0xb0, 0x17, 0x0c, 0x82, 0x71, 0x7b, 0x12, 0xa7,
	0x8e, 0x58, 0x35, 0xf8, 0xc5, 0x12, 0x1b, 0xc2, 0x8d, 0xe3, 0xde, 0x72, 0xdc, 0x53, 0xef, 0x6a,
	0x10, 0x8c, 0x3b, 0xab, 0x06, 0xf7, 0x69, 0x36, 0x82, 0x68, 0xa7, 0xca, 0xf9, 0x81, 0xb2, 0x8f,
	0xde, 0xf5, 0xa5, 0x70, 0x3d, 0x3c, 0x09, 0xba, 0x73, 0x25, 0x18, 0x3a, 0x41, 0x8f, 0x9e, 0x75,
	0xe1, 0xf6, 0x1c, 0x63, 0x81, 0x06, 0x93, 0xa9, 0x1f, 0x4c, 0x17, 0x4a, 0x6a, 0x96, 0x40, 0x27,
	0x53, 0x42, 0x66, 0x62, 0x4b, 0x32, 0x23, 0x6d, 0x43, 0x45, 0xdc, 0xe3, 0x92, 0x35, 0xb4, 0x97,
	0x42, 0x6e, 0x5d, 0x17, 0x23, 0x88, 0xf2, 0x7f, 0x3a, 0xa8, 0x87, 0xec, 0x01, 0x9a, 0xc2, 0xcb,
	0x5c, 0xc1, 0x19, 0x40, 0x74, 0xd2, 0xb3, 0xa6, 0x9e, 0x9c, 0x76, 0x65, 0xe7, 0x1e, 0x9a, 0x46,
	0x19, 0x3c, 0x5a, 0xe1, 0x26, 0xaf, 0x40, 0xb2, 0x80, 0xa8, 0x2e, 0xb4, 0x0f, 0xd1, 0x4e, 0x1c,
	0x49, 0x62, 0x4e, 0x76, 0x29, 0xe6, 0x35, 0x66, 0x8f, 0x10, 0xd3, 0xb7, 0x21, 0xa9, 0x85, 0x92,
	0xf6, 0xd2, 0x98, 0x9f, 0x89, 0xc9, 0x01, 0xc2, 0x25, 0x66, 0xc4, 0x5e, 0x00, 0xce, 0x3d, 0x30,
	0x96, 0x5e, 0xbc, 0x76, 0xdf, 0xe7, 0xac, 0xb3, 0xa4, 0x31, 0x0e, 0xd8, 0x10, 0xc2, 0x93, 0x59,
	0xd6, 0x49, 0xff, 0xf4, 0xd1, 0x77, 0xa8, 0xde, 0x9b, 0xb5, 0xd6, 0x61, 0xfa, 0x5a, 0x6c, 0x36,
	0x2d, 0xfb, 0xa5, 0x9e, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x47, 0x43, 0xd4, 0x60, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FaceClient is the client API for Face service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FaceClient interface {
	Comparison(ctx context.Context, opts ...grpc.CallOption) (Face_ComparisonClient, error)
	Find(ctx context.Context, opts ...grpc.CallOption) (Face_FindClient, error)
}

type faceClient struct {
	cc grpc.ClientConnInterface
}

func NewFaceClient(cc grpc.ClientConnInterface) FaceClient {
	return &faceClient{cc}
}

func (c *faceClient) Comparison(ctx context.Context, opts ...grpc.CallOption) (Face_ComparisonClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Face_serviceDesc.Streams[0], "/Face/Comparison", opts...)
	if err != nil {
		return nil, err
	}
	x := &faceComparisonClient{stream}
	return x, nil
}

type Face_ComparisonClient interface {
	Send(*ComparisonRequest) error
	CloseAndRecv() (*ComparisonRespons, error)
	grpc.ClientStream
}

type faceComparisonClient struct {
	grpc.ClientStream
}

func (x *faceComparisonClient) Send(m *ComparisonRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *faceComparisonClient) CloseAndRecv() (*ComparisonRespons, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ComparisonRespons)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *faceClient) Find(ctx context.Context, opts ...grpc.CallOption) (Face_FindClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Face_serviceDesc.Streams[1], "/Face/Find", opts...)
	if err != nil {
		return nil, err
	}
	x := &faceFindClient{stream}
	return x, nil
}

type Face_FindClient interface {
	Send(*FindRequest) error
	CloseAndRecv() (*FindRespons, error)
	grpc.ClientStream
}

type faceFindClient struct {
	grpc.ClientStream
}

func (x *faceFindClient) Send(m *FindRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *faceFindClient) CloseAndRecv() (*FindRespons, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FindRespons)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FaceServer is the server API for Face service.
type FaceServer interface {
	Comparison(Face_ComparisonServer) error
	Find(Face_FindServer) error
}

// UnimplementedFaceServer can be embedded to have forward compatible implementations.
type UnimplementedFaceServer struct {
}

func (*UnimplementedFaceServer) Comparison(srv Face_ComparisonServer) error {
	return status.Errorf(codes.Unimplemented, "method Comparison not implemented")
}
func (*UnimplementedFaceServer) Find(srv Face_FindServer) error {
	return status.Errorf(codes.Unimplemented, "method Find not implemented")
}

func RegisterFaceServer(s *grpc.Server, srv FaceServer) {
	s.RegisterService(&_Face_serviceDesc, srv)
}

func _Face_Comparison_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FaceServer).Comparison(&faceComparisonServer{stream})
}

type Face_ComparisonServer interface {
	SendAndClose(*ComparisonRespons) error
	Recv() (*ComparisonRequest, error)
	grpc.ServerStream
}

type faceComparisonServer struct {
	grpc.ServerStream
}

func (x *faceComparisonServer) SendAndClose(m *ComparisonRespons) error {
	return x.ServerStream.SendMsg(m)
}

func (x *faceComparisonServer) Recv() (*ComparisonRequest, error) {
	m := new(ComparisonRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Face_Find_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FaceServer).Find(&faceFindServer{stream})
}

type Face_FindServer interface {
	SendAndClose(*FindRespons) error
	Recv() (*FindRequest, error)
	grpc.ServerStream
}

type faceFindServer struct {
	grpc.ServerStream
}

func (x *faceFindServer) SendAndClose(m *FindRespons) error {
	return x.ServerStream.SendMsg(m)
}

func (x *faceFindServer) Recv() (*FindRequest, error) {
	m := new(FindRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Face_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Face",
	HandlerType: (*FaceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Comparison",
			Handler:       _Face_Comparison_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Find",
			Handler:       _Face_Find_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "face.proto",
}
